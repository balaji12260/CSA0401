/*
 * Program: Dining Philosophers Problem (Mutex Solution)
 * File: dining_philosophers.c
 *
 * Compile:
 *   gcc dining_philosophers.c -o dining_philosophers -lpthread
 *
 * Run:
 *   ./dining_philosophers
 */

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];

void* philosopher(void* num) {
    int id = *(int*)num;

    for (int i = 0; i < 3; i++) {  // each philosopher eats 3 times
        printf("Philosopher %d is thinking 🍃\n", id);
        sleep(1);  // simulate thinking

        printf("Philosopher %d is hungry 🍽️\n", id);

        // Pick up left and right chopsticks (with deadlock prevention)
        int left = id;
        int right = (id + 1) % NUM_PHILOSOPHERS;

        // To avoid deadlock: odd philosophers pick right first, even pick left first
        if (id % 2 == 0) {
            pthread_mutex_lock(&chopsticks[left]);
            pthread_mutex_lock(&chopsticks[right]);
        } else {
            pthread_mutex_lock(&chopsticks[right]);
            pthread_mutex_lock(&chopsticks[left]);
        }

        printf("Philosopher %d starts eating 🍝\n", id);
        sleep(2);  // simulate eating

        printf("Philosopher %d finishes eating and puts down chopsticks 🥢\n", id);

        // Release both chopsticks
        pthread_mutex_unlock(&chopsticks[left]);
        pthread_mutex_unlock(&chopsticks[right]);
    }

    printf("Philosopher %d leaves the table ✅\n", id);
    pthread_exit(NULL);
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes (chopsticks)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for all philosophers to finish
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    printf("\nAll philosophers have finished dining. 🍽️\n");

    return 0;
}
