#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_THREADS 3

int shared_counter = 0;          // Shared resource
pthread_mutex_t lock;            // Mutex lock

void* thread_function(void* arg) {
    int thread_id = *((int*)arg);

    for (int i = 0; i < 5; i++) {
        // Lock before entering critical section
        pthread_mutex_lock(&lock);

        // Critical section
        int temp = shared_counter;
        printf("Thread %d entering critical section. Counter = %d\n", thread_id, temp);
        temp++;
        sleep(1); // simulate work
        shared_counter = temp;
        printf("Thread %d exiting critical section. Counter = %d\n", thread_id, shared_counter);

        // Unlock after leaving critical section
        pthread_mutex_unlock(&lock);

        sleep(1); // simulate other operations
    }
    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];
    int thread_ids[NUM_THREADS];

    // Initialize mutex lock
    pthread_mutex_init(&lock, NULL);

    // Create threads
    for (int i = 0; i < NUM_THREADS; i++) {
        thread_ids[i] = i + 1;
        pthread_create(&threads[i], NULL, thread_function, &thread_ids[i]);
    }

    // Wait for threads to complete
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy the mutex
    pthread_mutex_destroy(&lock);

    printf("\nFinal value of shared_counter = %d\n", shared_counter);

    return 0;
}
