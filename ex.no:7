#include <stdio.h>

int main() {
    int n, i, j, time = 0, min, pos, completed = 0;
    int arrival_time[20], burst_time[20], waiting_time[20], turnaround_time[20];
    int temp[20], process[20];
    float avg_wait = 0, avg_tat = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter Arrival Time for P%d: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter Burst Time for P%d: ", i + 1);
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i];
        process[i] = i + 1;
    }

    int finish_time[20], is_completed[20] = {0};

    printf("\nGantt Chart:\n");

    while (completed != n) {
        min = 9999;
        pos = -1;

        // Select process with shortest burst time among those that have arrived
        for (i = 0; i < n; i++) {
            if (arrival_time[i] <= time && is_completed[i] == 0 && burst_time[i] < min) {
                min = burst_time[i];
                pos = i;
            }
        }

        if (pos == -1) {
            time++;
            continue;
        }

        printf("P%d ", process[pos]);
        time += burst_time[pos];
        finish_time[pos] = time;
        turnaround_time[pos] = finish_time[pos] - arrival_time[pos];
        waiting_time[pos] = turnaround_time[pos] - temp[pos];

        avg_wait += waiting_time[pos];
        avg_tat += turnaround_time[pos];
        is_completed[pos] = 1;
        completed++;
    }

    printf("\n\n------------------------------------------------------\n");
    printf("Process\tArrival\tBurst\tWaiting\tTurnaround\n");
    printf("------------------------------------------------------\n");

    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n",
               process[i], arrival_time[i], temp[i], waiting_time[i], turnaround_time[i]);
    }

    printf("------------------------------------------------------\n");
    printf("Average Waiting Time: %.2f\n", avg_wait / n);
    printf("Average Turnaround Time: %.2f\n", avg_tat / n);

    return 0;
}
