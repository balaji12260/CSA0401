/*
 * Program: IPC using Message Queue
 * File: msg_queue_ipc.c
 *
 * Description:
 * Demonstrates communication between parent and child processes
 * using System V message queues.
 *
 * Compile:
 *   gcc msg_queue_ipc.c -o msg_queue_ipc
 *
 * Run:
 *   ./msg_queue_ipc
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>

// Define message structure
struct msg_buffer {
    long msg_type;        // Message type (must be > 0)
    char msg_text[100];   // Message data
};

int main() {
    key_t key;
    int msgid;

    // Generate a unique key for message queue
    key = ftok("progfile", 65);

    // Create a message queue and return ID
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget failed");
        exit(1);
    }

    struct msg_buffer message;

    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ----- CHILD PROCESS (Receiver) -----
        sleep(1);  // ensure parent sends first
        msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0);
        printf("Child: Message received from parent → \"%s\"\n", message.msg_text);

        // Destroy the message queue
        msgctl(msgid, IPC_RMID, NULL);
    } else {
        // ----- PARENT PROCESS (Sender) -----
        message.msg_type = 1;
        strcpy(message.msg_text, "Hello from Parent via Message Queue!");

        msgsnd(msgid, &message, sizeof(message.msg_text), 0);
        printf("Parent: Message sent → \"%s\"\n", message.msg_text);

     
    }

    return 0;
}
